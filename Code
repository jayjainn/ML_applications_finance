import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
import tensorflow_addons as tfa

model1 = tf.keras.models.load_model('LSTM_new128.h5')
model2 = tf.keras.models.load_model('LSTM_25(128).h5')

def evaluate():
    df = dft.copy()
    actual_close = dfact
    pred_close = predict_func(df)

    actual_close = np.array(actual_close)
    pred_close = np.array(pred_close)
    mean_square_error = np.mean(np.square(actual_close - pred_close))

    pred_prev = [df['Close'].iloc[-1]]
    pred_prev.append(pred_close[0])
    pred_curr = pred_close

    actual_prev = [df['Close'].iloc[-1]]
    actual_prev.append(actual_close[0])
    actual_curr = actual_close

    pred_dir = np.array(pred_curr) - np.array(pred_prev)
    actual_dir = np.array(actual_curr) - np.array(actual_prev)
    dir_accuracy = np.mean((pred_dir * actual_dir) > 0) * 100

    print(f'Mean Square Error: {mean_square_error:.6f}\nDirectional Accuracy: {dir_accuracy:.1f}')
    return [mean_square_error, dir_accuracy]

def predict_func(data):
    i = 0
    while pd.isna(data.at[i, 'Close']):
        i += 1

    mask = data.index <= i
    data_filled = data.copy()
    data_filled.loc[mask] = data_filled.loc[mask].fillna(method='backfill')
    data = data_filled

    data = data.interpolate()
    df = data['Close']
    df = np.array(df).reshape((50, 1))
    scaler = MinMaxScaler(feature_range=(0, 1))
    df = scaler.fit_transform(df).reshape((1, 50, 1))

    predicted_1 = model2.predict(df)
    df = np.append(df.reshape((50, 1)), predicted_1).reshape((1, 51, 1))
    predicted_2 = model2.predict(df[:, 1:, :])
    df = np.append(df.reshape((51, 1)), predicted_2).reshape((52, 1))
    df = scaler.inverse_transform(df)

    return [df[-2][0], df[-1][0]]

if __name__ == "__main__":
    result = evaluate()
    print(result[0])

import yfinance as yf

df = pd.read_csv('STOCK_INDEX.csv')
len = 150
dftata = df[len-50:len]
dfact = df["Close"][len:len+2]
dfact

if __name__ == "__main__":
    data = pd.read_csv('STOCK_INDEX.csv')
    sum_rmse = 0
    sum_acc = 0
    for i in range(2400, 2600):
        dft = data[i-50:i]
        dfact = data['Close'][i:i+2]
        mean = np.mean(dft["Close"])
        evaluate()
